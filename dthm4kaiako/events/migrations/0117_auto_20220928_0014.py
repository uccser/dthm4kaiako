# Generated by Django 3.2.15 on 2022-09-27 11:14

import ckeditor_uploader.fields
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('events', '0116_auto_20220927_2341'),
    ]

    operations = [
        migrations.CreateModel(
            name='DeletedEventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_deleted', models.DateTimeField(auto_now_add=True, help_text='Date the original event registration was deleted')),
                ('withdraw_reason', models.PositiveSmallIntegerField(choices=[(3, 'No longer interested'), (4, 'Change of plans'), (5, 'No funding'), (6, 'Inconvient location'), (8, 'Wrong event'), (9, 'Clash of personal development'), (2, 'Illness'), (1, 'Prefer not to say'), (7, 'Other')], default=1, help_text='Reason the participant has chosen to withdraw their registration.')),
                ('other_reason_for_deletion', models.CharField(blank=True, max_length=300, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='EventRegistration',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('status', models.PositiveSmallIntegerField(choices=[(1, 'Pending'), (2, 'Approved'), (3, 'Rejected')], default=1)),
                ('staff_comments', models.TextField(blank=True)),
                ('representing', models.CharField(default='', help_text='Who will you be repesenting at this event? e.g. school, organisation, association, myself', max_length=300)),
                ('emergency_contact_first_name', models.CharField(default='', max_length=200, verbose_name="emergency contact's first name")),
                ('emergency_contact_last_name', models.CharField(default='', max_length=200, verbose_name="emergency contact's last name")),
                ('emergency_contact_relationship', models.CharField(default='', max_length=150, verbose_name='relationship with emergency contact')),
                ('emergency_contact_phone_number', models.CharField(default='', max_length=40, verbose_name="emergency contact's phone number")),
                ('paid', models.BooleanField(default=False)),
                ('bill_to', models.CharField(default='', help_text='Who will be paying for this participant to attend?', max_length=200)),
                ('billing_email_address', models.EmailField(max_length=100)),
                ('admin_billing_comments', models.TextField(blank=True)),
                ('billing_physical_address', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='events.address', verbose_name='billing address')),
            ],
            options={
                'verbose_name_plural': 'event registrations',
                'ordering': ['event', 'status'],
            },
        ),
        migrations.CreateModel(
            name='EventRegistrationsCSV',
            fields=[
                ('event', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, related_name='event_registration_csv', serialize=False, to='events.event')),
                ('file_name', models.CharField(default='event_registration_data', max_length=200)),
                ('event_name', models.BooleanField(default=True)),
                ('submitted_datetime', models.BooleanField(default=False)),
                ('updated_datetime', models.BooleanField(default=False)),
                ('status', models.BooleanField(default=False)),
                ('participant_type', models.BooleanField(default=False)),
                ('staff_comments', models.BooleanField(default=False)),
                ('participant_first_name', models.BooleanField(default=False)),
                ('participant_last_name', models.BooleanField(default=False)),
                ('dietary_requirements', models.BooleanField(default=False)),
                ('educational_entities', models.BooleanField(default=False)),
                ('region', models.BooleanField(default=False)),
                ('mobile_phone_number', models.BooleanField(default=False)),
                ('email_address', models.BooleanField(default=False)),
                ('how_we_can_best_accommodate_them', models.BooleanField(default=False)),
                ('representing', models.BooleanField(default=False)),
                ('emergency_contact_first_name', models.BooleanField(default=False)),
                ('emergency_contact_last_name', models.BooleanField(default=False)),
                ('emergency_contact_relationship', models.BooleanField(default=False)),
                ('emergency_contact_phone_number', models.BooleanField(default=False)),
                ('paid', models.BooleanField(default=False)),
                ('bill_to', models.BooleanField(default=False)),
                ('billing_physical_address', models.BooleanField(default=False)),
                ('billing_email_address', models.BooleanField(default=False)),
                ('admin_billing_comments', models.BooleanField(default=False)),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='eventapplication',
            unique_together=None,
        ),
        migrations.RemoveField(
            model_name='eventapplication',
            name='billing_physical_address',
        ),
        migrations.RemoveField(
            model_name='eventapplication',
            name='event',
        ),
        migrations.RemoveField(
            model_name='eventapplication',
            name='participant_type',
        ),
        migrations.RemoveField(
            model_name='eventapplication',
            name='user',
        ),
        migrations.RemoveField(
            model_name='eventapplicationscsv',
            name='event',
        ),
        migrations.RemoveField(
            model_name='eventcsv',
            name='approved_applications_count',
        ),
        migrations.RemoveField(
            model_name='eventcsv',
            name='pending_applications_count',
        ),
        migrations.RemoveField(
            model_name='eventcsv',
            name='rejected_applications_count',
        ),
        migrations.RemoveField(
            model_name='eventcsv',
            name='withdrawn_applications_count',
        ),
        migrations.AddField(
            model_name='eventcsv',
            name='approved_registrations_count',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='eventcsv',
            name='pending_registrations_count',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='eventcsv',
            name='rejected_registrations_count',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='eventcsv',
            name='withdrawn_registrations_count',
            field=models.BooleanField(default=False),
        ),
        migrations.AlterField(
            model_name='event',
            name='registration_link',
            field=models.URLField(blank=True, help_text="Only required when the event registration type is 'external'. \n\nThis is a link to an external location that will gather event registrations' information e.g. Google Form", null=True),
        ),
        migrations.AlterField(
            model_name='event',
            name='registration_type',
            field=models.PositiveSmallIntegerField(choices=[(1, 'Register to attend event'), (2, 'Apply to attend event'), (3, 'Visit event website'), (4, 'This event is invite only')], default=1, help_text='Register type events will not require you to approve or reject event reigstration forms.\n\nApply type events require you to approve event registrations in order for a participant to be attending this event.'),
        ),
        migrations.AlterField(
            model_name='registrationform',
            name='terms_and_conditions',
            field=ckeditor_uploader.fields.RichTextUploadingField(default='<p>Expenses for travel and accommodation are not covered by the event organisers, and are to be organised by the attendees themselves. Event organisers may provide details of available funding options that attendees&rsquo; may apply for.</p> <p>Should you need to cancel your registration/registration, please let us know as soon as possible and we&#39;ll remove it. If you do not show to the event without informing us, you may be liable for a &lsquo;did not show&rsquo; fee. We understand life happens.</p> <p>In the event of cancellation of the event, we will notify you as soon as possible. It is your responsibility to understand any cancellation clauses for your flights and accommodation. While we are sorry if this causes inconvenience, the organisers will not be liable for any loss, damages, or sadness arising from such changes.</p> <p>Please be aware the event organisers and attendees may be taking photographs, video, and/or audio to record events. These may be displayed on websites or social media for education and/or promotional purposes. By attending the event you understand that these images and recordings may be used by the event organisers for related marketing and promotions. You understand that if you do not wish to have your image or voice recorded you must inform any media person taking your photo, videoing you, or recording your voice at the workshop. It is your responsibility to remove yourself from the photo, video, or voice recording situations. Photographers will do their best to take group images that do not identify people and will seek permission in particular instances where close ups are taken. Attendees posting on social media will be asked to check with you first, before posting. The event organisers does not accept responsibility for media posted by attendees.</p> <p>By registering for this event, you agree to us storing your information for organising and running the event. You are required to follow all health and safety instructions from event organisers while attending the event.</p> <p>Finally, you agree to and understand with the terms and conditions regarding the Code of Conduct. Read our Code of Conduct here: https://gist.github.com/uccser-admin/56de956a32ccf68e253be8632957c014</p>', help_text='Event participants must agree to this to register/apply for this event.'),
        ),
        migrations.DeleteModel(
            name='DeletedEventApplication',
        ),
        migrations.DeleteModel(
            name='EventApplication',
        ),
        migrations.DeleteModel(
            name='EventApplicationsCSV',
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='events.event'),
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='participant_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to='events.tickettype'),
        ),
        migrations.AddField(
            model_name='eventregistration',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_registrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='deletedeventregistration',
            name='event',
            field=models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, related_name='deleted_event_registrations', to='events.event'),
        ),
        migrations.AlterUniqueTogether(
            name='eventregistration',
            unique_together={('event', 'user')},
        ),
    ]
